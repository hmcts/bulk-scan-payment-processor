#!groovy
@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.pipeline.TeamConfig

def type = "java"
def product = "bulk-scan"
def component = "payment-processor"

def channel = '#bsp-build-notices'
GradleBuilder builder = new GradleBuilder(this, product)

def secrets = [
  's2s-${env}': [
    secret('microservicekey-bulk-scan-orchestrator', 'S2S_SECRET')
  ],
  'bulk-scan-${env}': [
    secret('payments-queue-listen-connection-string', 'PAYMENTS_QUEUE_READ_CONNECTION_STRING'),
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {
  after('akschartsinstall'){
    // Vars needed for AKS testing
    env.S2S_NAME = 'bulk_scan_orchestrator'
    env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
    env.CORE_CASE_DATA_API_URL = 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'
    env.PAY_HUB_URL = "http://ccpay-bulkscanning-api-aat.service.core-compute-aat.internal"
    env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'
    env.IDAM_CLIENT_REDIRECT_URI = 'https://bulk-scan-orchestrator-aat.service.core-compute-aat.internal/oauth2/callback'
  }

  before('smoketest:preview') {
    withAksClient('nonprod') {
      def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
      def sbNamespaceSecret = "servicebus-secret-namespace-${aksServiceName}"
      def namespace = new TeamConfig(this).getNameSpace(product)

      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()

      def sbConnectionStr = kubectl.getSecret(sbNamespaceSecret, namespace, "{.data.connectionString}")
      env.PAYMENTS_QUEUE_WRITE_CONNECTION_STRING = "${sbConnectionStr};EntityPath=payments"
    }
  }

  // Vars needed for smoke / functional testing
  env.TEST_PAY_HUB_URL = 'http://ccpay-bulkscanning-api-aat.service.core-compute-aat.internal'

  after('test') {
    builder.gradle('integration')
  }

  enableDockerBuild()
  enableAksStagingDeployment()
  disableLegacyDeployment()
  installCharts()
  enableSlackNotifications(channel)
  loadVaultSecrets(secrets)
}
